name: Release

on:
  push:
    branches: [ master ]

jobs:
  check_code: # Validates the code (see checkBuild.yml)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '8'
        java-package: jdk+fx
        cache: 'maven'
      
    - name: Build with Maven
      run: mvn -B clean verify -Pjava8
      
    - name: Check for uncommited changes
      run: |
        if [[ "$(git status --porcelain)" != "" ]]; then
          echo ----------------------------------------
          echo git status
          echo ----------------------------------------
          git status
          echo ----------------------------------------
          echo git diff
          echo ----------------------------------------
          git diff
          echo ----------------------------------------
          echo Troubleshooting
          echo ----------------------------------------
          echo "::error::Unstaged changes detected. Locally try running: git clean -ffdx && mvn -B clean verify"
          exit 1
        fi

  prepare_release:
    runs-on: ubuntu-latest
    needs: [check_code]
    outputs:
      upload_url: ${{ steps.create_draft.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v3
      
    - name: Configure Git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        
    - name: Un-SNAP 
      run: mvn -B versions:set -DremoveSnapshot -DgenerateBackupPoms=false
  
    - name: Get version
      id: version
      # Ignores the suffix
      run: |
        read_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        parts=(${read_version//-/ })
        echo "::set-output name=release::${parts[0]}"
  
    - name: Commit and Push
      run: |
        git add -A
        git commit -m "Release ${{ steps.version.outputs.release }}"
        git push origin
        git tag v${{ steps.version.outputs.release }}
        git push origin --tags
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.release }}
        release_name: v${{ steps.version.outputs.release }}
        commitish: master
        body: |
          ## Installation [![Maven Central](https://img.shields.io/maven-central/v/com.xdev-software/xapi-fx?versionPrefix=${{ steps.version.outputs.release }})](https://mvnrepository.com/artifact/com.xdev-software/xapi-fx)
          Add the following lines to your pom:
          ```XML
          <dependency>
             <groupId>com.xdev-software</groupId>
             <artifactId>xapi-fx</artifactId>
             <version>${{ steps.version.outputs.release }}-java<JavaVersion></version>
          </dependency>
          ```
        draft: false
        prerelease: false

  publish_central: # Publish the code to central
    runs-on: ubuntu-latest
    needs: [prepare_release]
    strategy:
      matrix:
        java: [11, 17]
        java-package: [jdk]
        distribution: [temurin]
        include: 
          # When building Java 8 we need JavaFX on JDK basis
          - java: 8
            java-package: jdk+fx
            distribution: zulu
    steps:
    - uses: actions/checkout@v3
    
    - name: Init Git and pull
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull

      # Fixes OSSRH-66257
      # See https://issues.sonatype.org/browse/OSSRH-66257?focusedCommentId=1036973&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-1036973
    - if: ${{ matrix.java == 17 }}
      run: |
        echo 'MAVEN_OPTS=--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED' >> $GITHUB_ENV
    
    - name: Set up JDK and configure for ossrh
      uses: actions/setup-java@v2
      with: # running setup-java again overwrites the settings.xml
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}
        java-package: ${{ matrix.java-package }}
        server-id: ossrh
        server-username: MAVEN_CENTRAL_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}

    - name: Publish to Apache Maven Central
      run: mvn -B deploy -Possrh,java${{ matrix.java }}
      env:
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
  
  publish-pages:
    # Java 8-variant has no dependencies
    name: Publish dependencies and licenses to github pages (Java 11)
    runs-on: ubuntu-latest
    needs: [prepare_release]
    steps:
    - uses: actions/checkout@v3
      
    - name: Init Git and pull
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '11'
        java-package: jdk

    - name: Build dependencies/licenses files
      run: mvn -B project-info-reports:dependencies -Pjava11

    - name: Upload licenses - Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: dependencies-licenses
        path: target/site

    - name: Generate docs/dependencies dir
      run: mkdir -p docs/dependencies

    - name: Move built files into docs/dependencies
      run: mv target/site/* docs/dependencies

    - name: Rename dependencies.html to index.html
      working-directory: docs/dependencies
      run: mv dependencies.html index.html

    - name: Copy Readme into docs (as index.md)
      run: cp README.md docs/index.md

    - name: Configure Pages
      working-directory: docs
      run: |-
        echo "theme: jekyll-theme-tactile" > _config.yml

    - name: Deploy to Github pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        enable_jekyll: true

  after_release:
    runs-on: ubuntu-latest
    needs: [publish_central]
    steps:
    - uses: actions/checkout@v3
      
    - name: Init Git and pull
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull
        
    - name: Inc Version and SNAP root
      # The versions plugin doesn't work that easily with maven so there are some workarounds
      run: |
        echo "Setting version without suffix"
        read_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        parts=(${read_version//-/ })
        mvn versions:set -DnewVersion=${parts[0]} -DgenerateBackupPoms=false
        
        echo "Incrementing version and set snapshot"
        mvn versions:set -DnextSnapshot=true -DgenerateBackupPoms=false
        
        echo "Set version with suffix"
        read_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        parts=(${read_version//-/ })
        mvn versions:set -DnewVersion="${parts[0]}-\${version.suffix}-${parts[1]}" -DgenerateBackupPoms=false
        
    - name: Git Commit and Push
      run: |
        git add -A
        git commit -m "Preparing for next development iteration"
        git push origin
    
    - name: pull-request
      uses: repo-sync/pull-request@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        destination_branch: "develop"
        pr_title: "Sync back"
        pr_body: "An automated PR to sync changes back"
